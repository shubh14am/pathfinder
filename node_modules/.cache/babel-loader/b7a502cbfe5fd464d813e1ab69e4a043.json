{"ast":null,"code":"var dx = [-1, 0, 0, 1];\nvar dy = [0, -1, 1, 0];\nvar Board = new Array(20);\nvar Path = new Array(20);\nvar timer = 100;\n\nfunction fill(i, j) {\n  setTimeout(function () {\n    let x = i + 10;\n    let y = j + 10;\n    document.getElementById(x + \"\" + y).classList.add(\"abc\");\n  }, timer);\n}\n\nfunction fillp(a, b) {\n  setTimeout(function () {\n    let x = a + 10;\n    let y = b + 10;\n    document.getElementById(x + \"\" + y).className = \"def\";\n  }, timer);\n}\n\nclass node {\n  constructor(i, j) {\n    this.x = i;\n    this.y = j;\n  }\n\n}\n\nvar BFS = function () {\n  return {\n    bfs: function (sx, sy, ex, ey, dt) {\n      var pending_nodes = [];\n      let t = new node(sx, sy);\n      pending_nodes.push(t);\n\n      while (pending_nodes.length !== 0) {\n        timer += dt;\n        var tmp = pending_nodes.shift();\n        if (tmp.x === ex && tmp.y === ey) return true;\n\n        for (let k = 0; k < 4; k++) {\n          let nx = tmp.x + dx[k];\n          let ny = tmp.y + dy[k];\n\n          if (nx >= 0 && nx <= 19 && ny >= 0 && ny <= 50) {\n            fill(nx, ny);\n\n            if (Board[nx][ny] === false) {\n              Path[nx][ny] = new node(tmp.x, tmp.y);\n              if (nx === ex && ny === ey) return true;\n              Board[nx][ny] = true;\n              pending_nodes.push(new node(nx, ny));\n            }\n          }\n        }\n      }\n    },\n    init: function () {\n      for (let i = 0; i < 20; i++) {\n        Board[i] = new Array(51);\n\n        for (let j = 0; j < 51; j++) {\n          Board[i][j] = false;\n        }\n      }\n\n      for (let i = 0; i < 20; i++) {\n        Path[i] = new Array(51);\n      }\n\n      timer = 100;\n    },\n    draw: function (sx, sy, ex, ey, dt) {\n      ex = Path[ex][ey].x;\n      ey = Path[ex][ey].y;\n\n      while (ex !== sx || ey !== sy) {\n        // console.log(Path[a][b]);\n        timer += dt;\n        fillp(ex, ey);\n        ex = Path[ex][ey].x;\n        ey = Path[ex][ey].y;\n      }\n    }\n  };\n}();\n\nexport default BFS;","map":{"version":3,"sources":["D:/vscode(web)/majorProject/PathFinder/src/bfs.jsx"],"names":["dx","dy","Board","Array","Path","timer","fill","i","j","setTimeout","x","y","document","getElementById","classList","add","fillp","a","b","className","node","constructor","BFS","bfs","sx","sy","ex","ey","dt","pending_nodes","t","push","length","tmp","shift","k","nx","ny","init","draw"],"mappings":"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","sourcesContent":["var dx = [-1, 0, 0, 1];\r\nvar dy = [0, -1, 1, 0];\r\n\r\nvar Board = new Array(20);\r\n\r\nvar Path = new Array(20);\r\n\r\nvar timer = 100;\r\nfunction fill(i, j) {\r\n    setTimeout(function () {\r\n        let x = i + 10;\r\n        let y = j + 10;\r\n        document.getElementById(x + \"\" + y).classList.add(\"abc\");\r\n    }, timer);\r\n}\r\n\r\nfunction fillp(a, b) {\r\n    setTimeout(function () {\r\n        let x = a + 10;\r\n        let y = b + 10;\r\n        document.getElementById(x + \"\" + y).className = \"def\";\r\n    }, timer);\r\n}\r\n\r\nclass node{\r\n    constructor(i,j){\r\n        this.x = i;\r\n        this.y = j;\r\n    }\r\n}\r\nvar BFS = (function(){\r\n    return {\r\n        bfs: function (sx, sy, ex, ey, dt) {\r\n\r\n            var pending_nodes = [];\r\n            let t = new node(sx, sy);\r\n            pending_nodes.push(t);\r\n\r\n            while (pending_nodes.length !== 0) {\r\n                timer += dt;\r\n                var tmp = pending_nodes.shift();\r\n\r\n                if (tmp.x === ex && tmp.y === ey)\r\n                    return true;\r\n\r\n                for (let k = 0; k < 4; k++) {\r\n                    let nx = tmp.x + dx[k];\r\n                    let ny = tmp.y + dy[k];\r\n                    if (nx >= 0 && nx <= 19 && ny >= 0 && ny <= 50) {\r\n                        fill(nx, ny);\r\n                        if (Board[nx][ny] === false) {\r\n                            Path[nx][ny] = new node(tmp.x, tmp.y);\r\n                            if (nx === ex && ny === ey) return true;\r\n                            Board[nx][ny] = true;\r\n                            pending_nodes.push(new node(nx, ny));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        init: function () {\r\n            for (let i = 0; i < 20; i++) {\r\n                Board[i] = new Array(51);\r\n                for (let j = 0; j < 51; j++) {\r\n                    Board[i][j] = false;\r\n                }\r\n            }\r\n            for (let i = 0; i < 20; i++) {\r\n                Path[i] = new Array(51);\r\n            }\r\n\r\n            timer = 100;\r\n\r\n        },\r\n        draw: function (sx, sy, ex, ey, dt) {\r\n            ex = Path[ex][ey].x;\r\n            ey = Path[ex][ey].y;\r\n            while (ex !== sx || ey !== sy) {\r\n                // console.log(Path[a][b]);\r\n                timer += dt;\r\n                fillp(ex, ey);\r\n                ex = Path[ex][ey].x;\r\n                ey = Path[ex][ey].y;\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\nexport default BFS;\r\n"]},"metadata":{},"sourceType":"module"}