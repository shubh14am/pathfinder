{"ast":null,"code":"var DIJKSTRA = function () {\n  var dx = [-1, 0, 0, 1];\n  var dy = [0, -1, 1, 0];\n  var timer = 100;\n\n  function fill(i, j) {\n    setTimeout(function () {\n      let x = i + 10;\n      let y = j + 10;\n      document.getElementById(x + \"\" + y).classList.add(\"def\");\n    }, timer);\n  }\n\n  var Board = new Array(20);\n\n  for (let i = 0; i < 20; i++) {\n    Board[i] = new Array(51);\n\n    for (let j = 0; j < 51; j++) {\n      Board[i][j] = false;\n    }\n  }\n\n  var weights = new Array(20);\n\n  for (let i = 0; i < 20; i++) {\n    weights[i] = new Array(51);\n\n    for (let j = 0; j < 51; j++) {\n      weights[i][j] = 999999;\n    }\n  }\n\n  var parent = new Array(20);\n\n  for (let i = 0; i < 20; i++) {\n    parent[i] = new Array(51);\n\n    for (let j = 0; j < 51; j++) {\n      parent[i][j] = -1;\n    }\n  }\n\n  function findMinVertex() {\n    let minVertex_i = 0;\n    let minVertex_j = 0;\n\n    for (let i = 0; i < 20; i++) {\n      for (let j = 0; j < 51; j++) {\n        if (Board[i][j] === false) {\n          if (weights[i][j] < weights[minVertex_i][minVertex_j]) {\n            minVertex_i = i;\n            minVertex_j = j;\n          }\n        }\n      }\n    }\n\n    return {\n      i: minVertex_i,\n      j: minVertex_j\n    };\n  }\n\n  return {\n    // public funcn\n    dijkstra: function (sx, sy, ex, ey, dt) {\n      weights[sx][sy] = 0;\n\n      for (let count = 0; count < 1100; count++) {\n        timer += dt;\n        let nv = findMinVertex();\n        console.log(nv);\n        Board[nv.i][nv.j] = true;\n\n        for (let k = 0; k < 4; k++) {\n          let adx = nv.i + dy[k];\n          let ady = nv.j + dx[k];\n\n          if (adx < 20 && ady < 50 && adx >= 0 && ady >= 0) {\n            if (Board[adx][ady] === false) {\n              fill(adx, ady);\n\n              if (weights[nv.i][nv.j] + 1 < weights[adx][ady]) {\n                weights[adx][ady] = 1 + weights[nv.i][nv.j];\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n}();\n\nexport default DIJKSTRA;","map":{"version":3,"sources":["D:/vscode(web)/majorProject/PathFinder/pathfinder/src/dijkstra.jsx"],"names":["DIJKSTRA","dx","dy","timer","fill","i","j","setTimeout","x","y","document","getElementById","classList","add","Board","Array","weights","parent","findMinVertex","minVertex_i","minVertex_j","dijkstra","sx","sy","ex","ey","dt","count","nv","console","log","k","adx","ady"],"mappings":"AAEA,IAAKA,QAAQ,GAAI,YAAU;AAEvB,MAAIC,EAAE,GAAG,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAT;AACA,MAAIC,EAAE,GAAG,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAT;AAEA,MAAIC,KAAK,GAAG,GAAZ;;AACA,WAASC,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AAChBC,IAAAA,UAAU,CAAC,YAAY;AACnB,UAAIC,CAAC,GAAGH,CAAC,GAAC,EAAV;AACA,UAAII,CAAC,GAAGH,CAAC,GAAC,EAAV;AACAI,MAAAA,QAAQ,CAACC,cAAT,CAAwBH,CAAC,GAAG,EAAJ,GAASC,CAAjC,EAAoCG,SAApC,CAA8CC,GAA9C,CAAkD,KAAlD;AACH,KAJS,EAIPV,KAJO,CAAV;AAKH;;AAED,MAAIW,KAAK,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAAZ;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBS,IAAAA,KAAK,CAACT,CAAD,CAAL,GAAW,IAAIU,KAAJ,CAAU,EAAV,CAAX;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBQ,MAAAA,KAAK,CAACT,CAAD,CAAL,CAASC,CAAT,IAAc,KAAd;AACH;AACJ;;AACD,MAAIU,OAAO,GAAG,IAAID,KAAJ,CAAU,EAAV,CAAd;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBW,IAAAA,OAAO,CAACX,CAAD,CAAP,GAAa,IAAIU,KAAJ,CAAU,EAAV,CAAb;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBU,MAAAA,OAAO,CAACX,CAAD,CAAP,CAAWC,CAAX,IAAgB,MAAhB;AACH;AACJ;;AACD,MAAIW,MAAM,GAAG,IAAIF,KAAJ,CAAU,EAAV,CAAb;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBY,IAAAA,MAAM,CAACZ,CAAD,CAAN,GAAY,IAAIU,KAAJ,CAAU,EAAV,CAAZ;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBW,MAAAA,MAAM,CAACZ,CAAD,CAAN,CAAUC,CAAV,IAAe,CAAC,CAAhB;AACH;AACJ;;AAGD,WAASY,aAAT,GAAwB;AACpB,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,WAAW,GAAG,CAAlB;;AACA,SAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAIQ,KAAK,CAACT,CAAD,CAAL,CAASC,CAAT,MAAgB,KAApB,EAA2B;AACvB,cAAIU,OAAO,CAACX,CAAD,CAAP,CAAWC,CAAX,IAAgBU,OAAO,CAACG,WAAD,CAAP,CAAqBC,WAArB,CAApB,EAAsD;AAClDD,YAAAA,WAAW,GAAGd,CAAd;AACAe,YAAAA,WAAW,GAAGd,CAAd;AACH;AACJ;AACJ;AACJ;;AACD,WAAO;AACHD,MAAAA,CAAC,EAACc,WADC;AAEHb,MAAAA,CAAC,EAACc;AAFC,KAAP;AAIH;;AAMD,SAAO;AAAG;AACNC,IAAAA,QAAQ,EAAE,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B;AAEpCV,MAAAA,OAAO,CAACM,EAAD,CAAP,CAAYC,EAAZ,IAAkB,CAAlB;;AAEA,WAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,IAA5B,EAAkCA,KAAK,EAAvC,EAA2C;AACvCxB,QAAAA,KAAK,IAAIuB,EAAT;AACA,YAAIE,EAAE,GAAGV,aAAa,EAAtB;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACAd,QAAAA,KAAK,CAACc,EAAE,CAACvB,CAAJ,CAAL,CAAYuB,EAAE,CAACtB,CAAf,IAAoB,IAApB;;AAEA,aAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAIC,GAAG,GAAGJ,EAAE,CAACvB,CAAH,GAAOH,EAAE,CAAC6B,CAAD,CAAnB;AACA,cAAIE,GAAG,GAAGL,EAAE,CAACtB,CAAH,GAAOL,EAAE,CAAC8B,CAAD,CAAnB;;AACA,cAAGC,GAAG,GAAG,EAAN,IAAYC,GAAG,GAAG,EAAlB,IAAwBD,GAAG,IAAG,CAA9B,IAAmCC,GAAG,IAAI,CAA7C,EAA+C;AAC3C,gBAAInB,KAAK,CAACkB,GAAD,CAAL,CAAWC,GAAX,MAAoB,KAAxB,EAA+B;AAC3B7B,cAAAA,IAAI,CAAC4B,GAAD,EAAMC,GAAN,CAAJ;;AACA,kBAAIjB,OAAO,CAACY,EAAE,CAACvB,CAAJ,CAAP,CAAcuB,EAAE,CAACtB,CAAjB,IAAsB,CAAtB,GAA0BU,OAAO,CAACgB,GAAD,CAAP,CAAaC,GAAb,CAA9B,EAAiD;AAC7CjB,gBAAAA,OAAO,CAACgB,GAAD,CAAP,CAAaC,GAAb,IAAoB,IAAIjB,OAAO,CAACY,EAAE,CAACvB,CAAJ,CAAP,CAAcuB,EAAE,CAACtB,CAAjB,CAAxB;AACH;AACJ;AACJ;AAEJ;AAEJ;AACJ;AA1BE,GAAP;AA6BH,CAzFe,EAAhB;;AA2FA,eAAeN,QAAf","sourcesContent":["\r\n\r\nvar  DIJKSTRA = (function(){\r\n\r\n    var dx = [-1, 0, 0, 1];\r\n    var dy = [0, -1, 1, 0];\r\n\r\n    var timer = 100;\r\n    function fill(i, j) {\r\n        setTimeout(function () {\r\n            let x = i+10;\r\n            let y = j+10;\r\n            document.getElementById(x + \"\" + y).classList.add(\"def\");\r\n        }, timer);\r\n    }\r\n\r\n    var Board = new Array(20);\r\n    for (let i = 0; i < 20; i++) {\r\n        Board[i] = new Array(51);\r\n        for (let j = 0; j < 51; j++) {\r\n            Board[i][j] = false;\r\n        }\r\n    }\r\n    var weights = new Array(20);\r\n    for (let i = 0; i < 20; i++) {\r\n        weights[i] = new Array(51);\r\n        for (let j = 0; j < 51; j++) {\r\n            weights[i][j] = 999999;\r\n        }\r\n    }\r\n    var parent = new Array(20);\r\n    for (let i = 0; i < 20; i++) {\r\n        parent[i] = new Array(51);\r\n        for (let j = 0; j < 51; j++) {\r\n            parent[i][j] = -1;\r\n        }\r\n    }\r\n\r\n\r\n    function findMinVertex(){\r\n        let minVertex_i = 0;\r\n        let minVertex_j = 0;\r\n        for (let i = 0; i < 20; i++) {\r\n            for(let j = 0; j < 51; j++) {\r\n                if (Board[i][j] === false) {\r\n                    if (weights[i][j] < weights[minVertex_i][minVertex_j]){\r\n                        minVertex_i = i;\r\n                        minVertex_j = j;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            i:minVertex_i,\r\n            j:minVertex_j\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    return {  // public funcn\r\n        dijkstra: function (sx, sy, ex, ey, dt) {\r\n\r\n            weights[sx][sy] = 0;\r\n\r\n            for (let count = 0; count < 1100; count++) {\r\n                timer += dt;\r\n                let nv = findMinVertex();\r\n                console.log(nv);\r\n                Board[nv.i][nv.j] = true;\r\n\r\n                for (let k = 0; k < 4; k++) {\r\n                    let adx = nv.i + dy[k];\r\n                    let ady = nv.j + dx[k];\r\n                    if(adx < 20 && ady < 50 && adx >=0 && ady >= 0){\r\n                        if (Board[adx][ady] === false) {\r\n                            fill(adx, ady);\r\n                            if (weights[nv.i][nv.j] + 1 < weights[adx][ady]) {\r\n                                weights[adx][ady] = 1 + weights[nv.i][nv.j];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n})(); \r\n\r\nexport default DIJKSTRA;"]},"metadata":{},"sourceType":"module"}